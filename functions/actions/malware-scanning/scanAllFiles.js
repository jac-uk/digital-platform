const request = require('request-promise');
const fs = require('fs');
const os = require('os');
const path = require('path');

module.exports = (config, firebase) => {

  const PROJECT_ID = config.PROJECT_ID;
  const SCAN_SERVICE_URL = `https://malware-scanner-dot-${PROJECT_ID}.appspot.com/scan`;

  return {
    scanAllFiles,
  };

  /**
   * Scans all files for viruses
   *
   * force - if true then previously scanned files will be rescanned
   * maxFiles - maximum number of files to scan (useful when testing)
   */
  async function scanAllFiles(force = false, maxFiles = 999999) {

    const started = Date.now();

    // setup the HTTP request to the malware scanner web service
    const options = {
      method: 'POST',
      uri: SCAN_SERVICE_URL,
      body: {
        filename: null,
      },
      json: true,
    };

    // open the storage bucket
    const bucket = firebase.storage().bucket(config.STORAGE_URL);

    // get all files in the bucket
    const [files] = await bucket.getFiles({
      // 'prefix': '/exercises',
    });

    // scan all files
    let scanResult;
    const processed = [];
    for (let i = 0; i < files.length; i++) {
      let file = files[i];

      // there is no point scanning the logs files this function produces
      if (file.name.startsWith('virusScanningLogs')) {
        continue; // skip this file
      }

      if (force || file.metadata.metadata.scanned === undefined) {

        // make the HTTP request to scan the file
        options.body.filename = file.name;
        try {
          scanResult = await request(options);
        } catch(e) {
          scanResult = {error: e.message};
        }

        processed.push({
          name: file.name,
          scanned: getScannedDateTime(Date.now()),
          status: scanResult.status || scanResult.error,
        });

      } else { // don't rescan this file

        processed.push({
          name: file.name,
          scanned: getScannedDateTime(file.metadata.metadata.scanned),
          status: file.metadata.metadata.status || null,
        });

      }

      if (processed.length >= maxFiles) {
        break;
      }

    }

    createLogFile(bucket, started, processed);
  }

  /**
   * Converts the 'scanned' metadata into a human-readable datetime format
   * @param {null|string} meta
   * @returns null|string
   */
  function getScannedDateTime(meta) {
    if (meta) {
      const scanned = new Date(parseInt(meta));
      date = scanned.toJSON().slice(0, 10).split('-').reverse().join('/');
      time = scanned.toLocaleTimeString('en-GB');
      return date + ' ' + time;
    }
    return null;
  }

  /**
   * Creates a log file for the specified files that have been processed
   *
   * @param {bucket} bucket - the bucket that was scanned
   * @param {Date} started - the date/time the scanning started
   * @param {array} processed - the files that were processed (to log)
   */
  async function createLogFile(bucket, started, processed) {

    const content = `
      Virus Scanning Log

      Start time: ${getScannedDateTime(started)}
      End time: ${getScannedDateTime(Date.now())}

      Processed:

      ${JSON.stringify(processed)}
    `;

    // save log to local temp file
    const timestamp = (new Date()).toISOString();
    const fileName = timestamp + '.json';
    const tempFilePath = path.join(os.tmpdir(), fileName);
    fs.writeFileSync(tempFilePath, content);

    // upload log file to storage
    await bucket.upload(tempFilePath, {
      destination: 'virusScanningLogs/' + fileName,
    });

    // delete local temp file
    fs.unlinkSync(tempFilePath);

  }

};
