rules_version = '2';
service cloud.firestore {

  function userIsAuthenticated() {
    return request.auth.uid != null;
  }

  function hasPermission(permission) {
    return request.auth.token.rp != null && permission in request.auth.token.rp;
  }

  function currentUser() {
    return request.auth.uid;
  }

  function userIsJAC() {
    return request.auth.token.email.matches('(.*@judicialappointments|.*@justice)[.](digital|gov[.]uk)');
    // return request.auth.token.email_verified
    //   && request.auth.token.email.matches('(.*@judicialappointments|.*@justice)[.](digital|gov[.]uk)');
  }

  function userHasEmail(email) {
    return request.auth.token.email.lower() == email.lower();
    //return request.auth.token.email_verified
      //&& request.auth.token.email.lower() == email.lower();
  }

  function fieldHasValue(data, field, value) {
    return !(field in data) || data[field] == value;
  }

  // function notChanged(field) {
  //   return !(field in request.resource.data)
  //     || resource.data[field] == request.resource.data[field]
  // }

  function verifyFields(required, optional) {
    return true;
    // TODO: below is commented, function needs improvement.
    // TODO: add tests
    // let all = required.concat(optional);
    // return request.resource.data.keys().hasAll(required);
    //  && request.resource.data.keys().hasOnly(all);
  }

  function canUpdateApplicationViaCandidateForm(formId) {
    return resource.data.status == request.resource.data.status &&
      resource.data.status in ["draft", "applied"] &&
      formId in resource.data &&
      resource.data[formId].status in ["created", "requested"] &&
      request.resource.data[formId].status in ["created", "requested"];
  }

  match /databases/{database}/documents {

    match /{document=**} {
      allow read: if false;
      allow write: if false;
    }

    match /exercises/{exerciseId} {
      allow read: if userIsAuthenticated() && userIsJAC() && hasPermission('e1');
      allow create: if userIsAuthenticated() && userIsJAC() && hasPermission('e2') && verifyFields(['referenceNumber', 'progress', 'state', 'createdBy'], []);
      allow update: if userIsAuthenticated() && userIsJAC() && hasPermission('e3') && verifyFields(['referenceNumber', 'progress', 'state', 'createdBy'], []);
      allow delete: if userIsAuthenticated() && userIsJAC() && hasPermission('e4') && resource.data.state == "draft";

      match /data/{dataId} {
        allow read: if userIsAuthenticated() && userIsJAC();
      }
      match /reports/{reportId} {
        allow read: if userIsAuthenticated() && userIsJAC() && hasPermission('e1');
      }
      match /tasks/{taskId} {
        allow create, update: if userIsAuthenticated() && userIsJAC();
        allow read: if userIsAuthenticated() && userIsJAC();
      }
    }

    match /notifications/{notificationId} {
      allow read: if userIsAuthenticated() && userIsJAC() && hasPermission('n1');
      // allow write: if userIsAuthenticated() && userIsJAC();
    }

    match /notes/{noteId} {
      allow read: if userIsAuthenticated() && userIsJAC() && hasPermission('nt1');
      allow create: if userIsAuthenticated() && userIsJAC() && hasPermission('nt2') && verifyFields(['body', 'createdBy'], []);
      allow update: if userIsAuthenticated() && userIsJAC() && hasPermission('nt3') && verifyFields(['body', 'createdBy'], []);
      allow delete: if userIsAuthenticated() && userIsJAC() && hasPermission('nt4');
    }

    match /messages/{messageId} {
      allow read: if userIsAuthenticated() && userIsJAC() && hasPermission('msg1');
      allow create: if userIsAuthenticated() && userIsJAC() && hasPermission('msg2');
      allow update: if userIsAuthenticated() && userIsJAC() && hasPermission('msg3');
      allow delete: if userIsAuthenticated() && userIsJAC() && hasPermission('msg4');
    }

    match /panels/{panelId} {
      allow read: if userIsAuthenticated() && userIsJAC() && hasPermission('p1');
      allow create: if userIsAuthenticated() && userIsJAC() && hasPermission('p2');
      allow update: if userIsAuthenticated() && userIsJAC() && hasPermission('p3');
      allow delete: if userIsAuthenticated() && userIsJAC() && hasPermission('p4');
    }

    match /panellists/{panellistId} {
  		// Users can read & write to their own candidate document
      allow get, create, update: if request.auth.uid == panellistId;

      // Allow JAC to read and write
      allow read, write: if userIsAuthenticated() && userIsJAC();
    }

    match /meta/stats {
      allow read: if userIsAuthenticated() && userIsJAC() && hasPermission('m1');
      // Admin users can increment stats.exercisesCount and stats.bugReportsCount by 1
      allow update: if userIsAuthenticated() && userIsJAC() && hasPermission('m3') && request.resource.data.exercisesCount == resource.data.exercisesCount + 1;
      allow update: if userIsAuthenticated() && userIsJAC() && hasPermission('m3') && request.resource.data.bugReportsCount == resource.data.bugReportsCount + 1;
    }

    match /settings/services {
      allow read: if userIsAuthenticated() && userIsJAC() && hasPermission('s1');
      allow update: if userIsAuthenticated() && userIsJAC() && hasPermission('s3');
    }

    match /vacancies/{vacancyId} {
      allow read: if true;
      allow write: if false;

      // allow candidate to update vacancy meta/stats.applicationsCount
      match /meta/stats {
        allow read: if userIsAuthenticated();
        allow create: if userIsAuthenticated() && request.resource.data.applicationsCount == 1;
        allow update: if userIsAuthenticated() && request.resource.data.applicationsCount == resource.data.applicationsCount + 1;
      }

    }

    match /candidates/{candidateId} {
  		// Users can read & write to their own candidate document
      allow get, create, update: if request.auth.uid == candidateId;

      // Allow JAC to read
      allow read: if userIsAuthenticated() && userIsJAC() && hasPermission('c1');
      allow create: if userIsAuthenticated() && userIsJAC() && hasPermission('c2');
      allow update: if userIsAuthenticated() && userIsJAC() && hasPermission('c3');
      allow delete: if userIsAuthenticated() && userIsJAC() && hasPermission('c4');

      match /documents/{documentId} {
        allow get, create, update: if request.auth.uid == candidateId &&
          documentId in ['personalDetails', 'characterInformation', 'equalityAndDiversitySurvey'];
        allow read: if userIsAuthenticated() && userIsJAC() && hasPermission('c1');
        allow create: if userIsAuthenticated() && userIsJAC() && hasPermission('c2');
        allow update: if userIsAuthenticated() && userIsJAC() && hasPermission('c3');
        allow delete: if userIsAuthenticated() && userIsJAC() && hasPermission('c4');
      }
    }

    match /{path=**}/documents/{documentId} {
      allow read: if userIsAuthenticated() && userIsJAC();
    }

    function exerciseIsOpen(exerciseId) {
      let applicationOpenDate = get(/databases/$(database)/documents/exercises/$(exerciseId)).data.applicationOpenDate;
      let applicationCloseDate = get(/databases/$(database)/documents/exercises/$(exerciseId)).data.applicationCloseDate;
      return applicationOpenDate <= request.time
				&& request.resource.data.get("dateExtension", applicationCloseDate) > request.time;
    }
    function exerciseNeedsMoreInformation(exerciseId) {
      let exercise = get(/databases/$(database)/documents/exercises/$(exerciseId)).data;
      return exercise.keys().hasAll(['_applicationContent'])
        && exercise._applicationContent.keys().hasAll(['_currentStep'])
        && exercise._applicationContent._currentStep.step in exercise._applicationContent
        && exercise._applicationContent[exercise._applicationContent._currentStep.step].keys().size() > 0;
    }

    match /applications/{applicationId} {
      // allow admins full read access to all applications
      allow read: if userIsAuthenticated() && userIsJAC() && hasPermission('a1');

      // Allow existing records which belong to the current user
      allow read: if userIsAuthenticated() && resource.data.userId == currentUser();

      // Allow new records if they will belong to the current user, are draft and the exercise is open, and we have valid fields
      allow create: if request.resource.data.userId == currentUser() &&
        userIsAuthenticated() &&
        request.resource.data.status == "draft" &&
        exerciseIsOpen(request.resource.data.exerciseId) &&
        verifyFields(['userId', 'exerciseId', 'status'], []);

      // Allow admins to create late applications
      allow create: if userIsAuthenticated() && userIsJAC() &&
        request.resource.data.status == "draft";

      // Allow updates on records which belong, and will continue to belong, to the current user
      // But only if the application is in 'draft' state and exercise is open, and there are valid fields
      allow update: if resource.data.userId == currentUser() &&
        request.resource.data.userId == currentUser() &&
        (
          (  // draft application for an open vacancy
            resource.data.status == "draft" &&
            request.resource.data.status in ['draft', 'applied'] &&
            exerciseIsOpen(resource.data.exerciseId) &&
            verifyFields(['userId', 'exerciseId', 'status'], [])
          )
          ||
          (  // current application with more info requested
            resource.data.status == "applied" && request.resource.data.status == "applied" &&  // remains in applied status
            exerciseNeedsMoreInformation(resource.data.exerciseId)
          )
          ||
          (  // consent form information is requested
          resource.data.status in ["draft", "applied"] && request.resource.data.status in ["draft", "applied"] &&
          resource.data.characterChecks.status == "requested" &&
          request.resource.data.characterChecks.status in ["requested", "completed"]
          )
          ||
          canUpdateApplicationViaCandidateForm('preSelectionDayQuestionnaire')
        );

      // allow JAC admins to edit an application @TODO restrict what can be changed and by which role
      allow update: if userIsAuthenticated() && userIsJAC() && hasPermission('a3');
    }

    match /applicationRecords/{applicationId} {

      // allow admins full read access to all applicationRecords
      allow read: if userIsAuthenticated() && userIsJAC() && hasPermission('ar1');

      allow create: if userIsAuthenticated() && userIsJAC() && hasPermission('ar2');
      allow update: if userIsAuthenticated() && userIsJAC() && hasPermission('ar3');
      allow delete: if userIsAuthenticated() && userIsJAC() && hasPermission('ar4');

    }

    match /logs/login/{id}/{logId} {
      // allow candidates update their own logs
      allow read, write: if userIsAuthenticated() && currentUser() == id;
      allow read: if userIsAuthenticated() && userIsJAC() && hasPermission('l1');
    }

    // allow any logged in user to create event log entries
    // but only allow JAC users to read them

    match /logs/{type}/events/{eventId} {
      allow create: if userIsAuthenticated();
      allow read: if userIsAuthenticated() && userIsJAC() && hasPermission('l1');
    }

    match /assessments/{assessmentId} {
      // allow admins read permission
      allow read: if userIsAuthenticated() && userIsJAC() && hasPermission('as1');
      allow create: if userIsAuthenticated() && userIsJAC() && hasPermission('as2');
      allow update: if userIsAuthenticated() && userIsJAC() && hasPermission('as3');

      // allow assessor to read and update own documents
      allow read: if userIsAuthenticated() && userHasEmail(resource.data.assessor.email);
      allow update: if userIsAuthenticated() && userHasEmail(resource.data.assessor.email) &&
        (!('id' in resource.data.assessor) || resource.data.assessor.id == request.resource.data.assessor.id) &&
        (!('id' in request.resource.data.assessor) || request.resource.data.assessor.id == currentUser()) &&
        resource.data.assessor.email == request.resource.data.assessor.email &&
        resource.data.status == 'pending' &&
        (request.resource.data.status == 'completed' || request.resource.data.status == 'declined') &&
        request.time <= resource.data.hardLimitDate;
        // TODO allow uploads after the due date but before the hard limit resource.data.dueDate >= request.time;
    }

    match /invitations/{invitationId} {
      // allow admins to read invitations
      allow read: if userIsAuthenticated() && userIsJAC() && hasPermission('i1');
      allow create: if userIsAuthenticated() && userIsJAC() && hasPermission('i2');
      allow update: if userIsAuthenticated() && userIsJAC() && hasPermission('i3');
      allow delete: if userIsAuthenticated() && userIsJAC() && hasPermission('i4');

      // allow candidates to read and update their own invitations
      allow read, update: if userIsAuthenticated() && (
        fieldHasValue(resource.data.candidate, 'id', currentUser())
        || fieldHasValue(resource.data.candidate, 'email', request.auth.token.email)
      );
    }

    match /bugReports/{bugReportId} {
      // Allow JAC to read and write
      allow read, write: if userIsAuthenticated() && userIsJAC();
    }

    match /users/{userId} {
      // allow users to read & write to their own documents
      allow read, write: if userIsAuthenticated() && request.auth.uid == userId;

      // allow admins
      allow read: if userIsAuthenticated() && userIsJAC() && hasPermission('u7');
      allow create: if userIsAuthenticated() && userIsJAC();
      allow update: if userIsAuthenticated() && userIsJAC();
      allow delete: if userIsAuthenticated() && userIsJAC() && hasPermission('u4');
    }

    match /userInvitations/{userId} {
      // allow admins
      allow read: if userIsAuthenticated() && userIsJAC();
      allow create: if userIsAuthenticated() && userIsJAC() && hasPermission('u6');
      allow update: if userIsAuthenticated() && userIsJAC();
      allow delete: if userIsAuthenticated() && userIsJAC();
    }

    match /roles/{roleId} {
      allow read: if userIsAuthenticated() && userIsJAC();
      allow write: if userIsAuthenticated() && userIsJAC() && hasPermission('u3');
    }

    match /candidateForms/{formId} {
      allow read: if userIsAuthenticated() && userIsJAC();
      allow read: if userIsAuthenticated() && currentUser() in resource.data.candidateIds;
      allow write: if userIsAuthenticated() && userIsJAC() && hasPermission('cf3');

      match /responses/{responseId} {
        // jac admins can read and update
        allow read, update: if userIsAuthenticated() && userIsJAC();

        allow read: if userIsAuthenticated() && currentUser() == responseId;
        allow update: if userIsAuthenticated() && currentUser() == responseId && request.resource.data.applicationId == resource.data.applicationId && resource.data.status != 'completed';
      }
    }

  }
}
