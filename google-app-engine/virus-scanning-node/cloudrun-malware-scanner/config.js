const {Storage} = require('@google-cloud/storage');
const pkgJson = require('./package.json');

/**
 * @enum {string}
 */
const BucketTypes = Object.freeze({
  unscanned: 'unscanned',
  clean: 'clean',
  quarantined: 'quarantined',
});

/** @typedef {{[key in BucketTypes]: string}} BucketDefs */

/**
 * Configuration object.
 *
 * Values are read from the JSON configuration file.
 * See {@link readAndVerifyConfig}.
 *
 * @typedef {{
 *    buckets: Array<BucketDefs>,
 *    ClamCvdMirrorBucket: string,
 *    comments?: string
 *  }} Config
 */
const Config = null;

const storage = new Storage({
  userAgent: `cloud-solutions/${pkgJson.name}-usage-v${pkgJson.version}`,
});

/**
 * Read configuration from JSON configuration file, verify
 * and return a Config object
 *
 * @async
 * @param {string} configFile
 * @return {Promise<Config>}
 */
async function readAndVerifyConfig(configFile) {

  /** @type {Config} */
  let config;

  try {
    config = require(configFile);
    delete config.comments;
  } catch (e) {
    throw new Error(`Invalid configuration ${configFile}`);
  }

  if (!config.buckets || config.buckets.length === 0) {
    throw new Error('No buckets configured');
  }


  // Check buckets are specified and exist.
  let success = true;
  for (let x = 0; x < config.buckets.length; x++) {
    const bucketDefs = config.buckets[x];
    for (const bucketType in BucketTypes) {
      if (
        !(await checkBucketExists(
          bucketDefs[bucketType],
          `config.buckets[${x}].${bucketType}`
        ))
      ) {
        success = false;
      }
    }
    if (
      bucketDefs.unscanned === bucketDefs.clean ||
      bucketDefs.unscanned === bucketDefs.quarantined ||
      bucketDefs.clean === bucketDefs.quarantined
    ) {
      success = false;
    }
  }
  if (
    !(await checkBucketExists(
      config.ClamCvdMirrorBucket,
      'ClamCvdMirrorBucket'
    ))
  ) {
    success = false;
  }

  if (!success) {
    throw new Error('Invalid configuration');
  }
  return config;
}

/**
 * Check that given bucket exists. Returns true on success
 *
 * @param {string} bucketName
 * @param {string} configName
 * @return {Promise<boolean>}
 */
async function checkBucketExists(bucketName, configName) {
  if (!bucketName) {
    return false;
  }
  try {
    const [files] = await storage.bucket(bucketName).getFiles({ maxResults: 1, autoPaginate: false });
    if (files.length === 0) {
      return false;
    }
    return true;
  } catch (e) {
    console.log(e);
    return false 
  }
}

exports.Config = Config;
exports.readAndVerifyConfig = readAndVerifyConfig;
